[{"title":"我是如何把我的ArchLinux搞崩的","url":"/2023/05/15/archbooooooom/","content":"我是如何崩掉我的ArchLinux的上一篇文章提到我把我Arch搞崩了，這裡寫一下過程，方便大家借鑒（不是     \n包管理器裝過Arch的人都知道它的包管理器是pacman。不管怎麼樣，Debian的包管理器apt也是能跑起來的。不過wiki上已寫明，這兩個東西軟體列表不互通，也就是說互相不知道對方乾了什麼。     \n為什麼我要突然要用apt這個鍋我十分不情願的甩給icalingua++（icalingua++：這鍋我不背）    \nicalingua++是多平台的QQ第三方客戶端。那段時間tx剛剛停止了QQLinux登錄（原因是準備大更新，沒過幾週新版就上線了），我又急著用QQ，然後裝了這個玩意。我是從Discover應用商店下載的軟體，但是Discover更新版本慢，於是我實際上安裝了舊版本。   \n\n為什麼我不用wineQQ呢，因為不知道為什麼yay補不全依賴。裝了deepinwine也不行。     \n\n登錄登不上，提示版本過低。我看了看是最新版啊（當時不知道是舊版），然後pacman  -Syu了一下也沒有更新。      \n然後我上了GitHub，看了看，哦，是舊版。       \n我找到Release，往下拉，發現沒有適用於Arch的版本，唯一一個認識的就是deb格式的安裝包。找了找，Arch可以裝dpkg，於是我費了半天事裝上了dpkg，嘗試安裝這個包，但是它報錯缺少依賴庫（基本是libxxx.so這些）。       \n然後我看了看，在Arch裡邊dpkg沒法解決依賴，得上apt，於是我又搞上了apt，還是不行。       \n我嘗試搜索包，但是沒有相關的包。我繼續查資料，發現沒有這方面的資料。按理說我應該已經發現不對勁了，但是我急著用QQ，就沒多想，繼續鍥而不捨的整。      \n然後我發現根本沒辦法補全依賴，氣得我直接apt upgrade，你猜怎麼著，它終於開始補依賴了，我突然挺開心，就放著它upgrade，我在旁邊寫作業。      \n過了一會我抬起頭，看到列表裡面有libc++，我覺得不大對勁：LinuxKernel是C編譯的，為什麼會缺這東西         \n但是已經晚了。     \n過了不久，apt突然停止運作，plasma提示各種軟體停止運行。我嘗試打開Konsole，打不開。還好之前已經打開的終端沒關閉，我隨便輸了個指令，它報錯 bash:內存轉儲錯誤。      \n一番折騰之後我選擇了強制關機（為什麼要強制呢？因為shutdown都報錯了hhhh），重啟。      \n但是沒啟動起來。         \ngrub引導之後直接報RIP Code.          \n完了。          \n記下RIP code查了一下，發現最近似的案例是系統關鍵庫缺失（他就是缺了libc），很明顯這是我apt整的。       \n都這個樣了，沒什麼動力去修了（況且也修不好）第二天我就把系統重新安裝了。還好沒什麼重要信息在裡面。         \n這個故事告訴我們：不要混用包管理器1111111前面提到了，apt和pacman數據不互通。系統安裝時pacman安裝了這些庫，但是apt不知道，於是拿自己的一套替換了原有的庫，導致了系統崩潰。     \n後來怎麼樣重裝完系統之後，我一看，Discover更新了，於是我終於用最新版的icalingua++登錄了QQ。icalingua++很好用，我沒有抹黑他的意思。又過了不久，QQLinux更新了，於是我換上了這個東西用著。但是平常一直用icalingua++。\n好消息是，我的系統再沒崩潰過（\n","categories":["2023年5月"],"tags":["ArchLinux","日常"]},{"title":"废话","url":"/2022/10/21/dialog1/","content":"真的是啊 总有那么些人自己不深究 看到别人用电脑就说是在玩 听到别人说听不懂的东西便不假思索的否定 别人有不同的想法便群起而攻之 最离谱的是还有人附和\n","categories":["2022年10月"],"tags":["废话"]},{"title":"EFI Shell應急啟動系統","url":"/2023/05/15/efibooting/","content":"EFI Shell應急啟動系統前些日子我十分順利的把我盤裡的ArchLinux搞崩潰了（這是另一個故事，這裡暫且不談），只能重新裝了一遍。但是裝系統的時候忘了裝rEFInder，導致換一台機器引導就失效。還好電腦支援Built-in Shell，要不然這系統就算無了。\n啟動到EFI Shell\n前置條件：電腦支援UEFI，並且USB設備已連接\n\n開機狂按boot熱鍵，找啟動項，回車進入。\n啟動系統uefi方式是從設備的引導文件啟動，而非legacy的引導分區。所以需要找到系統的引導文件（*.efi）。進入Shell之後首先 map一下設備，USB設備通常會顯示在底部，並帶有 PciRoot USB之類的字樣。找到設備的名稱（Shell中為黃色高亮字樣）打個比方，我這塊盤是 hd957c2a\n\n需要注意的是 設備名不是以blk開頭的那些\n\n打開硬盤：hd975c2a:列出目錄：ls然後cd進目錄裡面找efi文件即可，知道了輸入   name-of-the-file.efi，回車即可。\n","categories":["2023年5月"],"tags":["EFI Shell","Arch Linux"]},{"title":"【随笔】每日死亡","url":"/2023/10/09/everyday-death/","content":"“前天在树下被雷劈死，昨天出门后被车撞死……今天如何？还未一下古老而经典的——嗯……比如，吊死？不得不说，上吊的快感即使已经经历多次，仍在诱惑我呢~ 腹上死？咱俩干那种事有点过分，况且要么你死要么我死不大公平。有什么两人一起死的方法么？……啊！来点……被双马尾紧缚死怎么样？会~高~潮~呦~ 欸，但头发似乎不够长……或者就简简单单的——”\n面前眉飞色舞的少女突然没了声息，双眼迅速黯淡下来，身体散架般倾倒。我上前扶住她，探了一下脉搏，随后合上她的双眼，把她抱回床上。姐姐今天是猝死的啊……好突然。该计划一下我的今日份死法了。早点去死，早点挨到明天，早早享受下一次死亡的快感。一重复的死亡 ，湮灭自己真正的死期。\n","categories":["2023年10月"],"tags":["随笔","精神状态"]},{"title":"Fiora+Goorm IDE部署在线聊天系统","url":"/2022/11/08/fiora-goorm/","content":"Fiora+GoormIDE部署在线聊天系统\nTip：GoormIDE今年10月停止了对免费用户的Always-On（保持开启）功能，如果你有一个早于10月注册的账号，则会保有Always-On功能，可以参照这篇文章。当然升级计划也可以，IDE配置会提高，还允许绑自己的域名。升级计划之后该文章仍然可用。\n\nfiora 是一款有趣的聊天应用. 基于 node.js, MongoDB, react 和 socket.io 等技术开发。该项目起始于2015-11-04。GoormIDE提供免费的CloudIDE环境，支持Python，Java，PHP，Kotlin，Ruby等多种语言的开发环境。免费IDE提供Docker内Ubuntu18.04&#x2F;16.04&#x2F;14.04（root账户），8核心EPYC7742、1GB RAM和10GB存储。     \n创建容器（Container）在Goorm主页中选择New Container，输入名称，选择Blank（空白模板），勾选Install MongoDB（安装MongoDB）然后点击Create，等待完成。出现“Container has been successfully created.Run the generated container XXXX”后，         \n\n2022&#x2F;10之后注册的用户没有Always-On选项，直接点击Run Container         \n\n2022&#x2F;10之前注册&#x2F;开通了其他计划的用户，刷新页面，点击stop（关闭容器），打开Always-On之后再Run Container。\n\n\n配置环境IDE开启后是这样的界面\n安装Redis打开https://redis.io/topics/quickstart，选Install redis  on Linux，选择第一种方法安装。       \ncurl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpgecho &quot;deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main&quot; | sudo tee /etc/apt/sources.list.d/redis.listsudo apt-get update\n\n返回如下：       \nroot@goorm:/workspace/fioratt# curl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpgroot@goorm:/workspace/fioratt# echo &quot;deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main&quot; | sudo tee /etc/apt/sources.list.d/redis.listdeb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb bionic mainroot@goorm:/workspace/fioratt# sudo apt-get updateHit:1 [Index of /ubuntu](http://ap-northeast-2.ec2.archive.ubuntu.com/ubuntu) bionic InReleaseHit:2 [Index of /ubuntu](http://ap-northeast-2.ec2.archive.ubuntu.com/ubuntu) bionic-updates InReleaseHit:3 [Index of /ubuntu](http://ap-northeast-2.ec2.archive.ubuntu.com/ubuntu) bionic-backports InReleaseIgn:6 https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.4 InReleaseGet:5 https://cli-assets.heroku.com/apt ./ InRelease [2550 B]Hit:7 [Index of /ubuntu](http://security.ubuntu.com/ubuntu) bionic-security InReleaseErr:5 https://cli-assets.heroku.com/apt ./ InRelease ease [2679 B]Err:5 https://cli-assets.heroku.com/apt ./ InRelease ease [2679 B]Err:5 https://cli-assets.heroku.com/apt ./ InRelease ease [2679 B].................................................Err:5 https://cli-assets.heroku.com/apt ./ InRelease ease [2679 B] The following signatures couldn&#x27;t be verified because the public key is not available: NO_PUBKEY 536F8F1DE80F6A35Get:11 https://packages.redis.io/deb bionic/main all Packages [2501 B]Err:4 [https://cf-cli-debian-repo.s3.amazonaws.com](https://cf-cli-debian-repo.s3.amazonaws.com) stable InRelease The following signatures were invalid: EXPKEYSIG 172B5989FCD21EF8 CF CLI Team [cf-cli-eng@pivotal.io](mailto:cf-cli-eng@pivotal.io) Get:12 https://packages.redis.io/deb bionic/main amd64 Packages [10.4 kB]Fetched 22.0 kB in 4s (5172 B/s)Reading package lists... DoneW: An error occurred during the signature verification. The repository is not updated and the previous index files will be used. GPG error: https://cli-assets.heroku.com/apt ./ InRelease: The following signatures couldn&#x27;t beverified because the public key is not available: NO_PUBKEY 536F8F1DE80F6A35W: An error occurred during the signature verification. The repository is not updated and the previous index files will be used. GPG error: [https://cf-cli-debian-repo.s3.amazonaws.com](https://cf-cli-debian-repo.s3.amazonaws.com) stable InRelease: The following signatures were invalid: EXPKEYSIG 172B5989FCD21EF8 CF CLI Team &lt;cf-cli-eng@pivotal.io&gt;\n\n然后安装Redis:       \nsudo apt-get install redis\n\nReading package lists... DoneBuilding dependency treeReading state information... DoneThe following additional packages will be installed: redis-server redis-toolsSuggested packages: ruby-redisThe following NEW packages will be installed: redis redis-server redis-tools0 upgraded, 3 newly installed, 0 to remove and 193 not upgraded.Need to get 1346 kB of archives.After this operation, 8381 kB of additional disk space will be used.Do you want to continue? [Y/n] YGet:1 https://packages.redis.io/deb bionic/main amd64 redis-tools amd64 6:7.0.5-1rl1~bionic1 [1222 kB]Get:2 https://packages.redis.io/deb bionic/main amd64 redis-server amd64 6:7.0.5-1rl1~bionic1 [85.7 kB]............................invoke-rc.d: policy-rc.d denied execution of start.Setting up redis (6:7.0.5-1rl1~bionic1) ...Processing triggers for systemd (237-3ubuntu10.29) ...\n\n返回大概是这样。       \n运行Redis服务root@goorm:/workspace/fioratt# redis-server2086:C 08 Nov 2022 03:21:05.199 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo2086:C 08 Nov 2022 03:21:05.199 # Redis version=7.0.5, bits=64, commit=00000000, modified=0, pid=2086, just started2086:C 08 Nov 2022 03:21:05.199 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf2086:M 08 Nov 2022 03:21:05.199 * Increased maximum number of open files to 10032 (it was originally set to 1024).2086:M 08 Nov 2022 03:21:05.199 * monotonic clock: POSIX clock_gettime _._ _.-``__ &#x27;&#x27;-._ _.-`` `. `_. &#x27;&#x27;-._ Redis 7.0.5 (00000000/0) 64 bit .-`` .-```. ```\\/ _.,_ &#x27;&#x27;-._ ( &#x27; , .-` | `, ) Running in standalone mode |`-._`-...-` __...-.``-._|&#x27;` _.-&#x27;| Port: 6379 | `-._ `._ / _.-&#x27; | PID: 2086 `-._ `-._ `-./ _.-&#x27; _.-&#x27; |`-._`-._ `-.__.-&#x27; _.-&#x27;_.-&#x27;| | `-._`-._ _.-&#x27;_.-&#x27; | https://redis.io `-._ `-._`-.__.-&#x27;_.-&#x27; _.-&#x27; |`-._`-._ `-.__.-&#x27; _.-&#x27;_.-&#x27;| | `-._`-._ _.-&#x27;_.-&#x27; | `-._ `-._`-.__.-&#x27;_.-&#x27; _.-&#x27; `-._ `-.__.-&#x27; _.-&#x27; `-._ _.-&#x27; `-.__.-&#x27;2086:M 08 Nov 2022 03:21:05.200 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.2086:M 08 Nov 2022 03:21:05.200 # Server initialized2086:M 08 Nov 2022 03:21:05.200 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add &#x27;vm.overcommit_memory = 1&#x27; to /etc/sysctl.conf and then reboot or run the command &#x27;sysctl vm.overcommit_memory=1&#x27; for this to take effect.2086:M 08 Nov 2022 03:21:05.200 * Ready to accept connections\n\n看到Ready to accept connections就说明安装好了，现在刷新Terminal（点击TERMINAL旁边的小箭头），再次运行redis-server，会提示Failed listening on port 6379 (TCP), aborting. 这说明redis服务已经在后台运行了。\n安装Node.js由于fiora需要特定版本的Node.js（14.15.0），这里需要用到nvm.        \nwget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh | bashexport NVM_DIR=&quot;$([ -z &quot;$&#123;XDG_CONFIG_HOME-&#125;&quot; ] &amp;&amp; printf %s &quot;$&#123;HOME&#125;/.nvm&quot; || printf %s &quot;$&#123;XDG_CONFIG_HOME&#125;/nvm&quot;)&quot;[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm\n\n返回如下：      \nroot@goorm:/workspace/fioratt# wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh | bash=&gt; Downloading nvm from git to &#x27;/root/.nvm&#x27;=&gt; Cloning into &#x27;/root/.nvm&#x27;...remote: Enumerating objects: 356, done.remote: Counting objects: 100% (356/356), done.remote: Compressing objects: 100% (303/303), done.remote: Total 356 (delta 39), reused 164 (delta 27), pack-reused 0Receiving objects: 100% (356/356), 222.14 KiB | 475.00 KiB/s, done.Resolving deltas: 100% (39/39), done.- (HEAD detached at FETCH_HEAD)  master  =&gt; Compressing and cleaning up git repository=&gt; Appending nvm source string to /root/.bashrc=&gt; Appending bash_completion source string to /root/.bashrc=&gt; Close and reopen your terminal to start using nvm or run the following to use it now:export NVM_DIR=&quot;$HOME/.nvm&quot;[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/bash_completion&quot; # This loads nvm bash_completionroot@goorm:/workspace/fioratt# export NVM_DIR=&quot;$([ -z &quot;$&#123;XDG_CONFIG_HOME-&#125;&quot; ] &amp;&amp; printf %s &quot;$&#123;HOME&#125;/.nvm&quot; || printf %s &quot;$&#123;XDG_CONFIG_HOME&#125;/nvm&quot;)&quot;root@goorm:/workspace/fioratt# [ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm\n\n安装Node.js：       \nnvm install 14.15.0\n\n返回如下：     \nroot@goorm:/workspace/fioratt# nvm install 14.15.0Downloading and installing node v14.15.0...Downloading https://nodejs.org/dist/v14.15.0/node-v14.15.0-linux-x64.tar.xz...########################################################################################################################################################################################################################## 100.0%Computing checksum with sha256sumChecksums matched!manpath: can&#x27;t set the locale; make sure $LC_* and $LANG are correctNow using node v14.15.0 (npm v6.14.8)Creating default alias: default -&gt; 14.15.0 (-&gt; v14.15.0)\n\n验证安装：        \nroot@goorm:/workspace/fioratt# node -vv14.15.0root@goorm:/workspace/fioratt# npm -v6.14.8\n\n安装yarn:npm install -g yarn            \n返回如下：       \nroot@goorm:/workspace/fioratt# npm install -g yarn&gt; yarn@1.22.19 preinstall /root/.nvm/versions/node/v14.15.0/lib/node_modules/yarn&gt; :; (node ./preinstall.js &gt; /dev/null 2&gt;&amp;1 || true)/root/.nvm/versions/node/v14.15.0/bin/yarn -&gt; /root/.nvm/versions/node/v14.15.0/lib/node_modules/yarn/bin/yarn.js/root/.nvm/versions/node/v14.15.0/bin/yarnpkg -&gt; /root/.nvm/versions/node/v14.15.0/lib/node_modules/yarn/bin/yarn.js- yarn@1.22.19  added 1 package in 2.375s\n\n克隆项目到本地       \ngit clone https://github.com/yinxin630/fiora.git -b master\n\ncd到fiora根目录：cd fiora安装依赖：yarn install.这一步会比较慢，因为内存太小了（1G），如果终端突然刷新就重新来过吧\nroot@goorm:/workspace/fioratt/fiora(master)# yarn installyarn install v1.22.19[1/5] Validating package.json...[2/5] Resolving packages...[3/5] Fetching packages...info There appears to be trouble with your network connection. Retrying...[4/5] Linking dependencies...warning &quot; &gt; @testing-library/react@12.0.0&quot; has unmet peer dependency &quot;react@*&quot;.warning &quot; &gt; @testing-library/react@12.0.0&quot; has unmet peer dependency &quot;react-dom@*&quot;.warning &quot; &gt; @typescript-eslint/eslint-plugin@2.34.0&quot; has incorrect peer dependency &quot;eslint@^5.0.0 || ^6.0.0&quot;.warning &quot; &gt; @typescript-eslint/parser@2.34.0&quot; has incorrect peer dependency &quot;eslint@^5.0.0 || ^6.0.0&quot;.[5/5] Building fresh packages...$ npx lerna bootstrap &amp;&amp; yarn linklerna notice cli v4.0.0lerna info versioning independentlerna info Bootstrapping 10 packageslerna info Installing external dependencies    lerna info Symlinking packages and binarieslerna success Bootstrapped 10 packagesyarn link v1.22.19success Registered &quot;fiora&quot;.info You can now run `yarn link &quot;fiora&quot;` in the projects where you want to use this package and it will be used instead.Done in 0.51s.Done in 540.43s.    \n\n构建web客户端：yarn build:web.也很慢，耐心~         \nroot@goorm:/workspace/fioratt/fiora# yarn build:webyarn run v1.22.19$ npx lerna run build:web --streamlerna notice cli v4.0.0lerna info versioning independentlerna info Executing command in 1 package: &quot;yarn run build:web&quot;@fiora/web: warning package.json: &quot;dependencies&quot; has dependency &quot;@testing-library/jest-dom&quot; with range &quot;^5.14.1&quot; that collides with a dependency in &quot;devDependencies&quot; of the same name with version &quot;^4.2.4&quot;@fiora/web: $ rm -rf dist &amp;&amp; cross-env NODE_ENV=production DOTENV_CONFIG_PATH=../../.env webpack --config build/webpack.prod.js &amp;&amp; cp -r -f dist/fiora/* ../server/public@fiora/web: ℹ Compiling Webpack@fiora/web: Browserslist: caniuse-lite is outdated. Please run:@fiora/web: npx browserslist@latest --update-db@fiora/web: Why you should do it regularly:@fiora/web: https://github.com/browserslist/browserslist#browsers-data-updating\n\n到这里看似卡住，但是实际上它一直在跑，等着就行.但是一旦刷新还是得重来啊草没报什么错基本就是成功了（废话）\n配置Jwtsecretecho &quot;JwtSecret=&lt;string&gt;&quot; &gt; .env2. 要将 &lt;string&gt; 替换为一个秘密文本，具体什么看你喜欢。\n配置域名和端口打开设置，找到URL&#x2F;Ports选项。可以看到它默认分配的域名是fioratt-owsii.run.goorm.io，端口是80。现在fiora的默认端口是9200，所以需要把它换到80端口（其实把域名端口改到9200也可以，但是打字加上端口号很麻烦）。在fiora根目录新建.env（环境变量）文件：touch .env在左边栏找到.env，打开它（编辑），第一行添加参数Port=80Ctrl+S保存。\n部署网页首先，运行redis-server，确认redis服务开启之后，运行mongod --fork --logpath=/data/db/log.log(目的是保持MongoDB后台运行。两个都正常在后台运行的输出如下：\nroot@goorm:/workspace/fioratt/fiora(master)# redis-server4837:C 08 Nov 2022 07:04:11.295 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo4837:C 08 Nov 2022 07:04:11.295 # Redis version=7.0.5, bits=64, commit=00000000, modified=0, pid=4837, just started4837:C 08 Nov 2022 07:04:11.295 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf4837:M 08 Nov 2022 07:04:11.296 * Increased maximum number of open files to 10032 (it was originally set to 1024).4837:M 08 Nov 2022 07:04:11.296 * monotonic clock: POSIX clock_gettime4837:M 08 Nov 2022 07:04:11.296 # Warning: Could not create server TCP listening socket *:6379: bind: Address already in use4837:M 08 Nov 2022 07:04:11.296 # Failed listening on port 6379 (TCP), aborting.root@goorm:/workspace/fioratt/fiora(master)# mongod --fork --logpath=/data/db/log.logabout to fork child process, waiting until server is ready for connections.forked process: 4988child process started successfully, parent exiting\n\n然后启动fiora：yarn start\nroot@goorm:/workspace/fioratt/fiora(master)# yarn startyarn run v1.22.19$ npx lerna run start --streamlerna notice cli v4.0.0lerna info versioning independentlerna info Executing command in 1 package: &quot;yarn run start&quot;@fiora/server: $ cross-env NODE_ENV=production DOTENV_CONFIG_PATH=../../.env ts-node -r dotenv/config --transpile-only src/main.ts@fiora/server: [2022-11-08T07:11:09.658] [INFO] default - &gt;&gt;&gt; server listen on http://localhost:80\n\n打开域名，应该你看到这样的页面：几乎就是成品了。\n保持后台运行fiora服务端也是会随着shell刷新被关闭的，所以需要pm2让它后台运行。            \n# 安装 pm2npm install -g pm2# 使用 pm2 运行 fiorapm2 start yarn --name fiora -- start# 查看 pm2 应用状态pm2 ls# 查看 pm2 fiora 日志pm2 logs fiora\n\n运行服务端：pm2 start yarn --name fiora -- start返回如下：          \n[PM2] Spawning PM2 daemon with pm2_home=/root/.pm2[PM2] PM2 Successfully daemonized[PM2] Starting /root/.nvm/versions/node/v14.15.0/bin/yarn in fork_mode (1 instance)[PM2] Done.┌─────┬──────────┬─────────────┬─────────┬─────────┬──────────┬────────┬──────┬───────────┬──────────┬──────────┬──────────┬──────────┐│ id │ name │ namespace │ version │ mode │ pid │ uptime │ ↺ │ status │ cpu │ mem │ user │ watching │├─────┼──────────┼─────────────┼─────────┼─────────┼──────────┼────────┼──────┼───────────┼──────────┼──────────┼──────────┼──────────┤│ 0 │ fiora │ default │ 0.39.2 │ fork │ 5496 │ 0s │ 0 │ online │ 0% │ 26.8mb │ root │ disabled │└─────┴──────────┴─────────────┴─────────┴─────────┴──────────┴────────┴──────┴───────────┴──────────┴──────────┴──────────┴──────────┘\n\n现在就可以直接访问网页端啦。最后把我自己的fiora链接放上 YukiChat,快来跟我聊天吧（\n","categories":["2022年11月"],"tags":["node.js","goormIDE","fiora","chatroom"]},{"title":"Hexo-GithubPages部署指北","url":"/2022/10/04/hexo-github/","content":"Hexo-GithubPages部署指北\nTip:静态博客的核心在于写作的物理机。所以，在进行下面任意一步时，确保旁边有一台电脑。此外，这篇教程针对的是Windows，对于Linux，以后的文章会写到。\n\n1.安装Node.jsHexo基于Node.js，所以一切的开始，你需要安装Node.js。单击16.17.1LTS下载（非LTS也可以，注意不要太久的版本）。下载完毕之后，运行程序并安装（一直Next即可）。安装完毕，调出cmd或者Powershell，运行node -v和npm -v指令。若指令返回版本号（而不是错误信息）就说明安装成功了。\nPS C:\\Windows\\system32&gt; npm -v8.15.0PS C:\\Windows\\system32&gt; node -vv16.17.1  \n\n2.安装Git打开Git首页，点击“Download for Windows”，找到“Other Git for Windows downloads”下的“Standalone Installer”，根据你的系统位数选择32bit&#x2F;64bit安装包。  S下载完毕同样下一步下一步即可。完成后右键菜单会多出来“Git Bash Here”和“Git GUI Here”两项。在任意目录选择“Git Bash Here”（或使用PowerShell或CMD），输入git --version，返回如下：\nC:\\users\\administrator\\desktop\\1&gt;git --versiongit version 2.37.2.windows.2\n\n至此Git安装完成。\n3.安装并部署Hexo在你想存放博客数据的地方新建一个文件夹，随便什么名字。打开powershell并cd到此目录，输入npm install hexo-cli -g返回结果大概是这样。\nPS C:\\Windows\\system32&gt; npm install hexo-cli -gadded 1 package, and changed 58 packages in 14s    \n\n然后输入hexo init (如果提示计算机已禁用脚本xxx.ps1，就换cmd并且cd到博客目录）\nC:\\users\\administrator\\desktop\\1&gt;hexo initINFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.gitINFO  Install dependenciesINFO  Start blogging with Hexo!    \n\n此时Hexo会克隆“hexo-starter”仓库，完成后显示“Start Blogging With Hexo”。输入hexo s启动本地预览。\nC:\\users\\administrator\\desktop\\1&gt;hexo sINFO  Validating configINFO  Start processingINFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.\n\n至此，你的博客就算是部署完成了！\n3.个性化博客\n记得Ctrl-C关掉预览！\n\n主题的配置Hexo的Themes页面会对你有所帮助。打开主题页面，选择喜爱的主题，把它下载到博客目录下&#x2F;themes文件夹里，并且把根目录下config.yml中theme改成你主题的文件夹的名字。\n# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: landscape  #修改此处    \n\n再次打开本地预览，正常的话，主题应该可以加载。\n网站标题&#x2F;副标题&#x2F;撰写者在根目录下config.yml中修改。提供一个模板，按需取用。\n# Sitetitle: Your own titlesubtitle: &#x27;it can be empty&#x27;description: &#x27;for better SEO,you can write it if you need&#x27;keywords: also for SEOauthor: Your Namelanguage: zh-CNtimezone: &#x27;Asia/Shanghai&#x27;   \n\nTitle即标题，Subtitle为副标题。Author即显示的作者。语言和时区照抄就OK。如果有中文，需要另存为UTF-8格式的文件，要不然会乱码。 所有“:”之后均有一个空格，不要删除！\n部署到GitHub Pages配置GitHub账号在Git Bash中输入 git config --global user.name &quot;Your GitHub Account Name&quot;     \ngit config --global user.email &quot;Your Github Account&#39;s Email&quot;\n配置SSH秘钥ssh-keygen -t rsa -C &quot;Your Github Account&#39;s email&quot; 后面连敲回车就行返回大概如下：\nC:\\users\\administrator\\desktop\\1&gt;ssh-keygen -t rsa -C &quot;someone@example.com&quot;Generating public/private rsa key pair.Enter file in which to save the key (C:\\Users\\Administrator/.ssh/id_rsa):Enter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in C:\\Users\\Administrator/.ssh/id_rsa.Your public key has been saved in C:\\Users\\Administrator/.ssh/id_rsa.pub.The key fingerprint is:SHA256:jgcBZgPRIGuuVyommF1Q someone@example.comThe key&#x27;s randomart image is:+---[RSA 2048]----+|  oo. o          ||.E. .  + .       ||. o              ||  +              ||o                || .               ||oo.              ||                 ||                 |+----[SHA256]-----+\n\n打开GitHub-&gt;Settings-&gt;SSH &amp; GPG Keys-&gt;New SSH key打开C:\\Users\\Administrator（即你的用户名）.ssh\\id_rsa.pub，把里面所有字符复制粘贴到网页中“Key”文本框中，Title随意填。点击“Add SSH Key”即可。返回Git Bash，输入ssh git@github.com返回Hi,xxx.You’ve successfully authenticated……..则配置成功。\n推送Blog新建存储库（Repository）打开新建页面     \nRepository Name填写 你的Github用户名.github.io    \nDescription 随便填    \n选择Public    \n选择Add a README file\n点击 Create repository   \n就新建完成了。   \n完成后切到Repo的settings页面，找到pages选项。设置Deploy from a branch，选择master分支&#x2F;root目录。\n配置Git推送在仓库页面Code下找到SSH地址（&#103;&#x69;&#x74;&#64;&#x67;&#x69;&#116;&#104;&#117;&#98;&#x2e;&#99;&#111;&#x6d;:用户名&#x2F;用户名.github.io.git）复制。   \n打开博客目录下config.yml，页面底部照这个填写   \ndeploy: type: &#x27;git&#x27; repo: git@github.com:你的用户名/你的用户名.github.io.git branch: master\n\n回到GitBash, 输入npm install hexo-deployer-git 安装部署插件。   \n安装完成后，输入hexo s   \n部署完成，等待一会就能看到成品（不是）了。\n","categories":["2022年12月"],"tags":["hexo","github pages","blog"]},{"title":"我想拥有我的博客!","url":"/2022/10/02/i-want-to-set-my-site/","content":"\n我也说不清为什么当初想要建立自己的博客了,大概是想要跟风写点东西。从2019年的生日我发出了第一篇文章到现在我给重建的博客写文,从一开始的不知道写什么到现在有目的的发文章,我觉得这是一种成长。\n其间发生过很多事情:换了一个又一个虚拟主机,博客框架也各种尝试。时间定格在2022&#x2F;9&#x2F;12,2019-2022上半年所有的文章没了,数据库文件损坏。这促使我把博客转移到了GithubPages托管。虽然文章丢失了,但是我的足迹没有消失,我执着于写博客,一部分原因就是留下自己的足迹。\n\n言归正传。不管什么原因,你需要搭建自己的博客。所以,首先你要有一个放它的地方。对于静态博客,可部署在Github&#x2F;Cloudflare&#x2F;Gitlab&#x2F;Gitee&#x2F;Bitbucket上(如果想完全自己写HTML可以试试Neocity)。如果想搭建动态博客(Wordpress&#x2F;Typecho之类),你至少需要一个虚拟主机或者服务器。\n静态博客VS动态博客(简略的)\n\n\n\n类别\n多账户\n在线编辑\n存储\n便利\n成本\n稳定性\n多样性\n\n\n\n动态\nOK\nOK\nWP比较臃肿,Typecho很轻量\n需要配置PHP,SQL等(宝塔可以一键部署)\n存在\n当心数据库!\n主流框架少\n\n\n静态\nNO\nNO(Hexo+  Heroku可以)\nLite\n安装NodeJS&#x2F;GO&#x2F;…+Git搞定。但是命令行操作\n可以不存在\n只要托管方没事博客就没事\nHexo&#x2F;Hugo&#x2F;Jekyll&#x2F;Docsify…一抓一大把\n\n\n\n\n\n类别\n主题\n插件\n可访问性\n安全性\n\n\n\n动态\n多(特效也多\n多\n国内运营商基本没问题,国外记得CDN\n数据库密码设的复杂些\n\n\n静态\n多\n多(但是可能不会用\n除了Gitee都在国外,加载速度较慢,只能通过自定义域名挂CDN\n当心Repository被别人搞了(\n\n\n两种平台各有千秋,不能说哪个好不好,只能看你习惯什么了。\n预计会写各种博客搭建的教程(因为都整过),时间关系,这篇文章仅作为一个开头(顺便提醒我别忘了更新)。\n我的知识水平有限,文章中若出现谬误,先不要生气,发送改正意见到我的邮箱,我会抽时间修正。\n","categories":["2022年12月"],"tags":["blog","senior","site"]},{"title":"一言","url":"/2022/12/12/log2/","content":"所有你愿意挥霍的时间都不能算作浪费。\n","categories":["2022年12月"],"tags":["一言"]},{"title":"使用Cloudflare Tunnel部署公网misskey实例的一些心得","url":"/2023/08/12/misskey-with-cloudflare-tunnel/","content":"\n嗯，好久没更新了……\n\n先说说Cloudflare Tunnel吧，这东西其实就是一个FRP，但是因为Cloudflare大厂所以完全免费。注册一个Cloudflare账号很简单，然后你需要一个属于自己的域名并过渡到Cloudflare管理（控制台底下有说明，在注册商改NS（Name Server，域名服务器）就行了。\n在控制台主页右边栏能找到Zero Trust，进入之后在右边栏翻一翻就能找到Tunnel了。新建一个Tunnel，跟随提示在你的服务器上安装对应的Cloudflared安装包，并且注册组件，再在控制台上填入需要映射的端口协议类型和端口号以及映射到的域名就行了。本次部署的是misskey，所以协议选择HTTP，端口填写localhost:3000即可。\n使用Cloudflare Tunnel之后无需设置Nginx代理！！\n其次，在进行NODE_ENV=production pnpm install --frozen-lockfile时，家里网络环境不好的可能会用NPMMIRROR镜像，但是这个镜像不够新，很多依赖会404，这时候就记下依赖包名，然后去NPMMIRROR手动镜像一下。\n然后是个人遇到的一点问题，运行pnpm run init报错，是数据库权限问题。具体参考这个issue。\n嗯。大概就这样。\n欢迎来玩！\n","categories":["2023年8月"],"tags":["misskey","cloudflare","linux","armbian"]},{"title":"3202年红米2搞机的正确姿势","url":"/2023/02/05/redmi2/","content":"3202年红米2搞机的正确姿势120买了台红米2，顺便收了一张32G的SD卡和一块备用电池，总共185块钱。\n拿到手之后先看系统，发现已经是MIUI9（Android5.0）了，就不用先更新固件版本。如果是安卓4.4需要先更新固件版本，后面再说。\n\n\n\nModel\nRedmi 2\nRedmi 2A\n\n\n\nSoC\nSnapdragon 410 ARM64\nL1860C ARM\n\n\nRAM\n2GB LPDDR3\nSame\n\n\nStorage\n16GB eMMC\nSame\n\n\nExternal   Storage\n32GB Max\nSame\n\n\n红米2的SoC是骁龙410，而2A是联芯L1860C，由于L1860C主频更高所以2A性能略好，但是410是64位处理器，而L1860C仅32位，所以410对大多数现代应用程序兼容性较好，可以刷MIUI安卓5，而L1860C就只能停留在安卓4.4了。\n但是抛开官方源，我们还有更多的选择。主流第三方ROM对红米2均提供支援，比如Lineage，Arrow和Mokee，都支持到安卓10。由于第三方ROM基本上把2和2A视为同一款机型，所以都只做了32位系统，发挥不出来410的64位支援。所以我选择了自己build64位ROM。\n自己build的bug贼多，我又抽不出来太多时间，于是放弃了。还好XDA上已经有人做出来了安卓8.1的64位ROM，够用了。\n开整！\n开始之前你需要准备：一台运行windows7及以上&#x2F;Ubuntu18以上&#x2F;MacOS的电脑；一台红米2；一张4~32GB的SD卡；一根USB数据线；足够的阅读能力和脑子\n下载资源原帖地址在这里，不过我还是直接把链接先copy过来得了\n\nADB工具（选择对应系统的版本，下载之后解压）     \nLink\n64位的TWRP（下载之后移动到ADB文件夹并重命名为twrp.img）Link\nSystem分区扩容工具（两个都需要）Link1-ResizePartition      \nLink2-ExpandPartition\nROMLink\n\nSystem扩容工具和ROM下载之后移动到SD卡中，并装入手机。\n连接电脑将手机进入开发者模式（没进入百度即可），找到并开启“通过USB调试”选项和有关FASTBOOT的选项。\n把手机用USB线连接到电脑上。\n在ADB目录内打开终端。     \n\n\n\nWindows\nUbuntu\nMacOS\n\n\n\nWindows徽标+R打开运行，输入cmd并回车,在窗口内输入cd并拖动ADB文件夹到窗口，之后Enter\nCtrl+Alt+T打开终端，cd到ADB目录。也可以sudo apt-get install nautilus-open-terminal，完成之后nautilus -q，ADB文件夹内右键会有Open in Terminal选项\n打开终端之后cd并将ADB文件夹拖动到窗口内，回车\n\n\n输入adb devices，手机会提示“是否允许该计算机调试”，选择允许。\nadb应该会返回xxxxxx device说明已连接。如果没有，尝试安装驱动（百度即可）。\n刷入TWRP\n红米2那个年代还没有流行起BL锁，所以不用解BL。\n\n终端内输入adb reboot bootloader，设备应当重启，进入“米兔维修”界面，有蓝色FASTBOOT字样出现。\n终端fastboot devices，应该会提示xxxxxx fastboot.Ubuntu和MacOS提示Permission denied需要用root权限运行。\n终端fastboot flash recovery twrp.img,刷入TWRP。\n成功之后关机，同时按住音量↑+音量↓+电源键，启动到Recovery。屏幕会显示TEAMWIN Recovery Project字样。\n扩容分区扩容System有变砖风险，谨慎！！！！\n进入TWRP之后会提示是否保持System分区为只读，此处不要选择保持只读，直接划到底，进入主页。\n点击Install,找到1Resize-System-Redmi2.zip,点击Install，接下来的页面不用管直接划到底。找不到zip点击Select Storage找找其他位置\n安装时会弹出GUI，直接Next即可，Select System Size可选1.5GB或2GB，推荐2GB是因为后续可以刷OpenGAPPS。最后选择START。\n最终会提示ALL DONE,点击Reboot即可，会自动重启到Recovery。\n刷入ROM进入TWRP之后点击Install,找到ROM文件，选择Install即可。\n刷入完成之后，不要Reboot，选择Back。回到Install界面，找到3Expand-filesystem-Redmi2.zip,安装。\n完成之后，就可以重启到系统了。\n开始设置吧！\n补充：安装OpenGAPPS\n为什么我把OpenGapps单独拎出来呢？因为如果刷ROM之后直接装OpenGAPPS可能会因为众所周知的网络原因无法登录，没法正常使用手机。所以这里默认你已经做好了科学上网的准备。\n\nOpenGAPPS下载地址       \n选择ARM64—8.1—nano，点击下载按钮，下载文件。完成之后拷到SD卡内，装入手机。\n重启到Recovery，点击Install选择OpenGAPPS文件，并安装。完成之后重启即可。接下来就可以设置谷歌账户了。\n补充：Magisk直接找boot.img修补来安装Magisk太麻烦，这里讲root之后直接安装Magisk的方式，比较简捷。\nROOTLineageOS17之前，root权限需要单独刷入扩展包实现。这里需要两个文件，一个用于安装，一个用于删除。\nSU安装包      \nSU卸载包     \n下载之后移动到SD卡，并装入手机。\n重启到Recovery，点Install，选择addonsu-15.1-arm64-signed.zip,安装。完成后重启到系统，在开发者模式下找到ROOT权限管理，授予“应用和ADB”。\n安装Magisk安装最新版Magisk APP，点击安装—直接安装，等待ROOT权限申请提示出现并允许。安装完成之后就好了。\n不要立即重启，选择自行重启。立即重启之后会提示发现不属于Magisk的SU模块，还是得进行下一步卸载。\n重启到Recovery，点Install，选择addonsu-remove-15.1-arm64-signed.zip，安装，完成之后重启。\n就可以愉快的使用Magisk了。\n","categories":["2023年2月"],"tags":["redmi 2","twrp","lineage"]},{"title":"【杂谈】关于明日方舟标题字体","url":"/2023/09/28/%E3%80%90%E6%9D%82%E8%B0%88%E3%80%91%E5%85%B3%E4%BA%8E%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9F%E6%A0%87%E9%A2%98%E5%AD%97%E4%BD%93/","content":"通常来说汉字书写是左低右高，注意是书写不是印刷。印刷用的宋体&#x2F;黑体字为了整齐（并且限制与当初造字时代的科技尚不发达，无法对字体做更多的调整）通常是完全水平。楷体字造字时间更晚，并且它需要楷书的特性所以有左低右高的体现。\n明日方舟标题的字体比较创新的一点就是抛弃了通常的左低右高原则，甚至反其道而行之，体现的左高右低。就书写来说这样的字不可能美观，但是鹰角通过改变细节抵消了违背原则带来的不适感。这套字基于宋体，但很显然单纯的宋体扭曲到左高右低不可能美观。于是有了微小的调整。\n如，第一个字 明 的偏旁 日 直接采用平行四边形的方式，而第二个字 日 则把底部做了修改，拆分了最底部的一横，使这个字在左高右低的原则内，底部呈现出一种左低右高的感觉。由于这个 日 是独体字不是偏旁，所以这种修改就变得必要起来，减少视觉上的疲劳，并且单字的结构变化与明日方舟四个字整体参差不齐的布局呼应。 \n然后就是勾画的修改。宋体的勾（竖钩一类）通常是与竖相连，是竖的一部分。明日方舟对勾做了调整，让它从竖中半独立出来，成为一个单独的三角形的部分。一方面也是减少视觉疲劳。另一方面，如果仍然采用直接扭曲的方法，这个勾会直接跟着竖一笔下来，而竖画，特别是相对右侧的竖画，是平行四边形，而非左侧竖画的梯形。勾画通常在靠右侧的竖上，为了保留右竖的结构特征，勾的形态必须做调整。 \n另外，明日方舟 标题这套字采用瘦长的结构，横细竖粗对比鲜明。撇画为了保持结构也被统一为竖撇。舟 的短撇被调整为类似反点的三角结构。 需要注意的是，左高右低，横细竖粗，对于捺画不怎么友好。也亏了 明日方舟 这几个字里没有捺。有的话还需要大量调整，我是懒得搞了，目前总结出两种方案。第一是捺整体一般粗细，头部接入上一笔画。坏处就是像 八 这种笔画不接触的字不好整。另一个是把捺处理成反撇，头部粗，尾部细，应用起来更方便，但视觉上可能有些奇怪。不过鉴于这套字本来就挺奇怪，这点修改应该不算什么（\n","categories":["2023年9月"],"tags":["ARKNIGHTS","明日方舟","杂谈"]}]